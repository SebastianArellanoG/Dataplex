import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions } from 'google-gax';
import * as protos from '../../protos/protos';
/**
 *  Policy Tag Manager Serialization API service allows you to manipulate
 *  your policy tags and taxonomies in a serialized format.
 *
 *  Taxonomy is a hierarchical group of policy tags.
 * @class
 * @memberof v1
 */
export declare class PolicyTagManagerSerializationClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    policyTagManagerSerializationStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of PolicyTagManagerSerializationClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new PolicyTagManagerSerializationClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Replaces (updates) a taxonomy and all its policy tags.
     *
     * The taxonomy and its entire hierarchy of policy tags must be
     * represented literally by `SerializedTaxonomy` and the nested
     * `SerializedPolicyTag` messages.
     *
     * This operation automatically does the following:
     *
     * - Deletes the existing policy tags that are missing from the
     *   `SerializedPolicyTag`.
     * - Creates policy tags that don't have resource names. They are considered
     *   new.
     * - Updates policy tags with valid resources names accordingly.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the taxonomy to update.
     * @param {google.cloud.datacatalog.v1.SerializedTaxonomy} request.serializedTaxonomy
     *   Required. Taxonomy to update along with its child policy tags.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.v1.Taxonomy|Taxonomy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager_serialization.replace_taxonomy.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManagerSerialization_ReplaceTaxonomy_async
     */
    replaceTaxonomy(request?: protos.google.cloud.datacatalog.v1.IReplaceTaxonomyRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datacatalog.v1.ITaxonomy,
        protos.google.cloud.datacatalog.v1.IReplaceTaxonomyRequest | undefined,
        {} | undefined
    ]>;
    replaceTaxonomy(request: protos.google.cloud.datacatalog.v1.IReplaceTaxonomyRequest, options: CallOptions, callback: Callback<protos.google.cloud.datacatalog.v1.ITaxonomy, protos.google.cloud.datacatalog.v1.IReplaceTaxonomyRequest | null | undefined, {} | null | undefined>): void;
    replaceTaxonomy(request: protos.google.cloud.datacatalog.v1.IReplaceTaxonomyRequest, callback: Callback<protos.google.cloud.datacatalog.v1.ITaxonomy, protos.google.cloud.datacatalog.v1.IReplaceTaxonomyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates new taxonomies (including their policy tags) in a given project
     * by importing from inlined or cross-regional sources.
     *
     * For a cross-regional source, new taxonomies are created by copying
     * from a source in another region.
     *
     * For an inlined source, taxonomies and policy tags are created in bulk using
     * nested protocol buffer structures.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of project that the imported taxonomies will belong
     *   to.
     * @param {google.cloud.datacatalog.v1.InlineSource} request.inlineSource
     *   Inline source taxonomy to import.
     * @param {google.cloud.datacatalog.v1.CrossRegionalSource} request.crossRegionalSource
     *   Cross-regional source taxonomy to import.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.v1.ImportTaxonomiesResponse|ImportTaxonomiesResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager_serialization.import_taxonomies.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManagerSerialization_ImportTaxonomies_async
     */
    importTaxonomies(request?: protos.google.cloud.datacatalog.v1.IImportTaxonomiesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datacatalog.v1.IImportTaxonomiesResponse,
        protos.google.cloud.datacatalog.v1.IImportTaxonomiesRequest | undefined,
        {} | undefined
    ]>;
    importTaxonomies(request: protos.google.cloud.datacatalog.v1.IImportTaxonomiesRequest, options: CallOptions, callback: Callback<protos.google.cloud.datacatalog.v1.IImportTaxonomiesResponse, protos.google.cloud.datacatalog.v1.IImportTaxonomiesRequest | null | undefined, {} | null | undefined>): void;
    importTaxonomies(request: protos.google.cloud.datacatalog.v1.IImportTaxonomiesRequest, callback: Callback<protos.google.cloud.datacatalog.v1.IImportTaxonomiesResponse, protos.google.cloud.datacatalog.v1.IImportTaxonomiesRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Exports taxonomies in the requested type and returns them,
     * including their policy tags. The requested taxonomies must belong to the
     * same project.
     *
     * This method generates `SerializedTaxonomy` protocol buffers with nested
     * policy tags that can be used as input for `ImportTaxonomies` calls.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the project that the exported taxonomies belong
     *   to.
     * @param {string[]} request.taxonomies
     *   Required. Resource names of the taxonomies to export.
     * @param {boolean} request.serializedTaxonomies
     *   Serialized export taxonomies that contain all the policy
     *   tags as nested protocol buffers.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.v1.ExportTaxonomiesResponse|ExportTaxonomiesResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager_serialization.export_taxonomies.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManagerSerialization_ExportTaxonomies_async
     */
    exportTaxonomies(request?: protos.google.cloud.datacatalog.v1.IExportTaxonomiesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datacatalog.v1.IExportTaxonomiesResponse,
        protos.google.cloud.datacatalog.v1.IExportTaxonomiesRequest | undefined,
        {} | undefined
    ]>;
    exportTaxonomies(request: protos.google.cloud.datacatalog.v1.IExportTaxonomiesRequest, options: CallOptions, callback: Callback<protos.google.cloud.datacatalog.v1.IExportTaxonomiesResponse, protos.google.cloud.datacatalog.v1.IExportTaxonomiesRequest | null | undefined, {} | null | undefined>): void;
    exportTaxonomies(request: protos.google.cloud.datacatalog.v1.IExportTaxonomiesRequest, callback: Callback<protos.google.cloud.datacatalog.v1.IExportTaxonomiesResponse, protos.google.cloud.datacatalog.v1.IExportTaxonomiesRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Return a fully-qualified entry resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} entry_group
     * @param {string} entry
     * @returns {string} Resource name string.
     */
    entryPath(project: string, location: string, entryGroup: string, entry: string): string;
    /**
     * Parse the project from Entry resource.
     *
     * @param {string} entryName
     *   A fully-qualified path representing Entry resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntryName(entryName: string): string | number;
    /**
     * Parse the location from Entry resource.
     *
     * @param {string} entryName
     *   A fully-qualified path representing Entry resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntryName(entryName: string): string | number;
    /**
     * Parse the entry_group from Entry resource.
     *
     * @param {string} entryName
     *   A fully-qualified path representing Entry resource.
     * @returns {string} A string representing the entry_group.
     */
    matchEntryGroupFromEntryName(entryName: string): string | number;
    /**
     * Parse the entry from Entry resource.
     *
     * @param {string} entryName
     *   A fully-qualified path representing Entry resource.
     * @returns {string} A string representing the entry.
     */
    matchEntryFromEntryName(entryName: string): string | number;
    /**
     * Return a fully-qualified entryGroup resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} entry_group
     * @returns {string} Resource name string.
     */
    entryGroupPath(project: string, location: string, entryGroup: string): string;
    /**
     * Parse the project from EntryGroup resource.
     *
     * @param {string} entryGroupName
     *   A fully-qualified path representing EntryGroup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntryGroupName(entryGroupName: string): string | number;
    /**
     * Parse the location from EntryGroup resource.
     *
     * @param {string} entryGroupName
     *   A fully-qualified path representing EntryGroup resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntryGroupName(entryGroupName: string): string | number;
    /**
     * Parse the entry_group from EntryGroup resource.
     *
     * @param {string} entryGroupName
     *   A fully-qualified path representing EntryGroup resource.
     * @returns {string} A string representing the entry_group.
     */
    matchEntryGroupFromEntryGroupName(entryGroupName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified policyTag resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} taxonomy
     * @param {string} policy_tag
     * @returns {string} Resource name string.
     */
    policyTagPath(project: string, location: string, taxonomy: string, policyTag: string): string;
    /**
     * Parse the project from PolicyTag resource.
     *
     * @param {string} policyTagName
     *   A fully-qualified path representing PolicyTag resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPolicyTagName(policyTagName: string): string | number;
    /**
     * Parse the location from PolicyTag resource.
     *
     * @param {string} policyTagName
     *   A fully-qualified path representing PolicyTag resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPolicyTagName(policyTagName: string): string | number;
    /**
     * Parse the taxonomy from PolicyTag resource.
     *
     * @param {string} policyTagName
     *   A fully-qualified path representing PolicyTag resource.
     * @returns {string} A string representing the taxonomy.
     */
    matchTaxonomyFromPolicyTagName(policyTagName: string): string | number;
    /**
     * Parse the policy_tag from PolicyTag resource.
     *
     * @param {string} policyTagName
     *   A fully-qualified path representing PolicyTag resource.
     * @returns {string} A string representing the policy_tag.
     */
    matchPolicyTagFromPolicyTagName(policyTagName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified tag resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} entry_group
     * @param {string} entry
     * @param {string} tag
     * @returns {string} Resource name string.
     */
    tagPath(project: string, location: string, entryGroup: string, entry: string, tag: string): string;
    /**
     * Parse the project from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTagName(tagName: string): string | number;
    /**
     * Parse the location from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTagName(tagName: string): string | number;
    /**
     * Parse the entry_group from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the entry_group.
     */
    matchEntryGroupFromTagName(tagName: string): string | number;
    /**
     * Parse the entry from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the entry.
     */
    matchEntryFromTagName(tagName: string): string | number;
    /**
     * Parse the tag from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the tag.
     */
    matchTagFromTagName(tagName: string): string | number;
    /**
     * Return a fully-qualified tagTemplate resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} tag_template
     * @returns {string} Resource name string.
     */
    tagTemplatePath(project: string, location: string, tagTemplate: string): string;
    /**
     * Parse the project from TagTemplate resource.
     *
     * @param {string} tagTemplateName
     *   A fully-qualified path representing TagTemplate resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTagTemplateName(tagTemplateName: string): string | number;
    /**
     * Parse the location from TagTemplate resource.
     *
     * @param {string} tagTemplateName
     *   A fully-qualified path representing TagTemplate resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTagTemplateName(tagTemplateName: string): string | number;
    /**
     * Parse the tag_template from TagTemplate resource.
     *
     * @param {string} tagTemplateName
     *   A fully-qualified path representing TagTemplate resource.
     * @returns {string} A string representing the tag_template.
     */
    matchTagTemplateFromTagTemplateName(tagTemplateName: string): string | number;
    /**
     * Return a fully-qualified tagTemplateField resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} tag_template
     * @param {string} field
     * @returns {string} Resource name string.
     */
    tagTemplateFieldPath(project: string, location: string, tagTemplate: string, field: string): string;
    /**
     * Parse the project from TagTemplateField resource.
     *
     * @param {string} tagTemplateFieldName
     *   A fully-qualified path representing TagTemplateField resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTagTemplateFieldName(tagTemplateFieldName: string): string | number;
    /**
     * Parse the location from TagTemplateField resource.
     *
     * @param {string} tagTemplateFieldName
     *   A fully-qualified path representing TagTemplateField resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTagTemplateFieldName(tagTemplateFieldName: string): string | number;
    /**
     * Parse the tag_template from TagTemplateField resource.
     *
     * @param {string} tagTemplateFieldName
     *   A fully-qualified path representing TagTemplateField resource.
     * @returns {string} A string representing the tag_template.
     */
    matchTagTemplateFromTagTemplateFieldName(tagTemplateFieldName: string): string | number;
    /**
     * Parse the field from TagTemplateField resource.
     *
     * @param {string} tagTemplateFieldName
     *   A fully-qualified path representing TagTemplateField resource.
     * @returns {string} A string representing the field.
     */
    matchFieldFromTagTemplateFieldName(tagTemplateFieldName: string): string | number;
    /**
     * Return a fully-qualified taxonomy resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} taxonomy
     * @returns {string} Resource name string.
     */
    taxonomyPath(project: string, location: string, taxonomy: string): string;
    /**
     * Parse the project from Taxonomy resource.
     *
     * @param {string} taxonomyName
     *   A fully-qualified path representing Taxonomy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTaxonomyName(taxonomyName: string): string | number;
    /**
     * Parse the location from Taxonomy resource.
     *
     * @param {string} taxonomyName
     *   A fully-qualified path representing Taxonomy resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTaxonomyName(taxonomyName: string): string | number;
    /**
     * Parse the taxonomy from Taxonomy resource.
     *
     * @param {string} taxonomyName
     *   A fully-qualified path representing Taxonomy resource.
     * @returns {string} A string representing the taxonomy.
     */
    matchTaxonomyFromTaxonomyName(taxonomyName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
