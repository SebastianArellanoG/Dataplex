"use strict";
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyTagManagerClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/policy_tag_manager_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./policy_tag_manager_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Policy Tag Manager API service allows you to manage your policy tags and
 *  taxonomies.
 *
 *  Policy tags are used to tag BigQuery columns and apply additional access
 *  control policies. A taxonomy is a hierarchical grouping of policy tags that
 *  classify data along a common axis.
 * @class
 * @memberof v1
 */
class PolicyTagManagerClient {
    /**
     * Construct an instance of PolicyTagManagerClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new PolicyTagManagerClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b, _c, _d, _e;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {
            throw new Error('Please set either universe_domain or universeDomain, but not both.');
        }
        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'
            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
            : undefined;
        this._universeDomain =
            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';
        this._servicePath = 'datacatalog.' + this._universeDomain;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};
        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== this._servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = this._servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === this._servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process === 'object' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            entryPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}'),
            entryGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/entryGroups/{entry_group}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            policyTagPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/taxonomies/{taxonomy}/policyTags/{policy_tag}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            tagPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}/tags/{tag}'),
            tagTemplatePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/tagTemplates/{tag_template}'),
            tagTemplateFieldPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/tagTemplates/{tag_template}/fields/{field}'),
            taxonomyPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/taxonomies/{taxonomy}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listTaxonomies: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'taxonomies'),
            listPolicyTags: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'policyTags'),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.datacatalog.v1.PolicyTagManager', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.policyTagManagerStub) {
            return this.policyTagManagerStub;
        }
        // Put together the "service stub" for
        // google.cloud.datacatalog.v1.PolicyTagManager.
        this.policyTagManagerStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.datacatalog.v1.PolicyTagManager')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.datacatalog.v1.PolicyTagManager, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const policyTagManagerStubMethods = [
            'createTaxonomy',
            'deleteTaxonomy',
            'updateTaxonomy',
            'listTaxonomies',
            'getTaxonomy',
            'createPolicyTag',
            'deletePolicyTag',
            'updatePolicyTag',
            'listPolicyTags',
            'getPolicyTag',
            'getIamPolicy',
            'setIamPolicy',
            'testIamPermissions',
        ];
        for (const methodName of policyTagManagerStubMethods) {
            const callPromise = this.policyTagManagerStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] || undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.policyTagManagerStub;
    }
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'datacatalog.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'datacatalog.googleapis.com';
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint() {
        return this._servicePath;
    }
    get universeDomain() {
        return this._universeDomain;
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    createTaxonomy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createTaxonomy(request, options, callback);
    }
    deleteTaxonomy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteTaxonomy(request, options, callback);
    }
    updateTaxonomy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'taxonomy.name': (_a = request.taxonomy.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateTaxonomy(request, options, callback);
    }
    getTaxonomy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getTaxonomy(request, options, callback);
    }
    createPolicyTag(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createPolicyTag(request, options, callback);
    }
    deletePolicyTag(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deletePolicyTag(request, options, callback);
    }
    updatePolicyTag(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'policy_tag.name': (_a = request.policyTag.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updatePolicyTag(request, options, callback);
    }
    getPolicyTag(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getPolicyTag(request, options, callback);
    }
    getIamPolicy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                resource: (_a = request.resource) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getIamPolicy(request, options, callback);
    }
    setIamPolicy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                resource: (_a = request.resource) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.setIamPolicy(request, options, callback);
    }
    testIamPermissions(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                resource: (_a = request.resource) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.testIamPermissions(request, options, callback);
    }
    listTaxonomies(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listTaxonomies(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the project to list the taxonomies of.
     * @param {number} request.pageSize
     *   The maximum number of items to return. Must be a value between 1 and 1000
     *   inclusively. If not set, defaults to 50.
     * @param {string} request.pageToken
     *   The pagination token of the next results page. If not set,
     *   the first page is returned.
     *
     *   The token is returned in the response to a previous list request.
     * @param {string} request.filter
     *   Supported field for filter is 'service' and value is 'dataplex'.
     *   Eg: service=dataplex.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.datacatalog.v1.Taxonomy|Taxonomy} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTaxonomiesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTaxonomiesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listTaxonomies'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTaxonomies.createStream(this.innerApiCalls.listTaxonomies, request, callSettings);
    }
    /**
     * Equivalent to `listTaxonomies`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the project to list the taxonomies of.
     * @param {number} request.pageSize
     *   The maximum number of items to return. Must be a value between 1 and 1000
     *   inclusively. If not set, defaults to 50.
     * @param {string} request.pageToken
     *   The pagination token of the next results page. If not set,
     *   the first page is returned.
     *
     *   The token is returned in the response to a previous list request.
     * @param {string} request.filter
     *   Supported field for filter is 'service' and value is 'dataplex'.
     *   Eg: service=dataplex.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.datacatalog.v1.Taxonomy|Taxonomy}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.list_taxonomies.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_ListTaxonomies_async
     */
    listTaxonomiesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listTaxonomies'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTaxonomies.asyncIterate(this.innerApiCalls['listTaxonomies'], request, callSettings);
    }
    listPolicyTags(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listPolicyTags(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the taxonomy to list the policy tags of.
     * @param {number} request.pageSize
     *   The maximum number of items to return. Must be a value between 1 and 1000
     *   inclusively.
     *   If not set, defaults to 50.
     * @param {string} request.pageToken
     *   The pagination token of the next results page. If not set, returns the
     *   first page.
     *
     *   The token is returned in the response to a previous list request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.datacatalog.v1.PolicyTag|PolicyTag} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listPolicyTagsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPolicyTagsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPolicyTags'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPolicyTags.createStream(this.innerApiCalls.listPolicyTags, request, callSettings);
    }
    /**
     * Equivalent to `listPolicyTags`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the taxonomy to list the policy tags of.
     * @param {number} request.pageSize
     *   The maximum number of items to return. Must be a value between 1 and 1000
     *   inclusively.
     *   If not set, defaults to 50.
     * @param {string} request.pageToken
     *   The pagination token of the next results page. If not set, returns the
     *   first page.
     *
     *   The token is returned in the response to a previous list request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.datacatalog.v1.PolicyTag|PolicyTag}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.list_policy_tags.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_ListPolicyTags_async
     */
    listPolicyTagsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPolicyTags'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPolicyTags.asyncIterate(this.innerApiCalls['listPolicyTags'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified entry resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} entry_group
     * @param {string} entry
     * @returns {string} Resource name string.
     */
    entryPath(project, location, entryGroup, entry) {
        return this.pathTemplates.entryPathTemplate.render({
            project: project,
            location: location,
            entry_group: entryGroup,
            entry: entry,
        });
    }
    /**
     * Parse the project from Entry resource.
     *
     * @param {string} entryName
     *   A fully-qualified path representing Entry resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntryName(entryName) {
        return this.pathTemplates.entryPathTemplate.match(entryName).project;
    }
    /**
     * Parse the location from Entry resource.
     *
     * @param {string} entryName
     *   A fully-qualified path representing Entry resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntryName(entryName) {
        return this.pathTemplates.entryPathTemplate.match(entryName).location;
    }
    /**
     * Parse the entry_group from Entry resource.
     *
     * @param {string} entryName
     *   A fully-qualified path representing Entry resource.
     * @returns {string} A string representing the entry_group.
     */
    matchEntryGroupFromEntryName(entryName) {
        return this.pathTemplates.entryPathTemplate.match(entryName).entry_group;
    }
    /**
     * Parse the entry from Entry resource.
     *
     * @param {string} entryName
     *   A fully-qualified path representing Entry resource.
     * @returns {string} A string representing the entry.
     */
    matchEntryFromEntryName(entryName) {
        return this.pathTemplates.entryPathTemplate.match(entryName).entry;
    }
    /**
     * Return a fully-qualified entryGroup resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} entry_group
     * @returns {string} Resource name string.
     */
    entryGroupPath(project, location, entryGroup) {
        return this.pathTemplates.entryGroupPathTemplate.render({
            project: project,
            location: location,
            entry_group: entryGroup,
        });
    }
    /**
     * Parse the project from EntryGroup resource.
     *
     * @param {string} entryGroupName
     *   A fully-qualified path representing EntryGroup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntryGroupName(entryGroupName) {
        return this.pathTemplates.entryGroupPathTemplate.match(entryGroupName)
            .project;
    }
    /**
     * Parse the location from EntryGroup resource.
     *
     * @param {string} entryGroupName
     *   A fully-qualified path representing EntryGroup resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntryGroupName(entryGroupName) {
        return this.pathTemplates.entryGroupPathTemplate.match(entryGroupName)
            .location;
    }
    /**
     * Parse the entry_group from EntryGroup resource.
     *
     * @param {string} entryGroupName
     *   A fully-qualified path representing EntryGroup resource.
     * @returns {string} A string representing the entry_group.
     */
    matchEntryGroupFromEntryGroupName(entryGroupName) {
        return this.pathTemplates.entryGroupPathTemplate.match(entryGroupName)
            .entry_group;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified policyTag resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} taxonomy
     * @param {string} policy_tag
     * @returns {string} Resource name string.
     */
    policyTagPath(project, location, taxonomy, policyTag) {
        return this.pathTemplates.policyTagPathTemplate.render({
            project: project,
            location: location,
            taxonomy: taxonomy,
            policy_tag: policyTag,
        });
    }
    /**
     * Parse the project from PolicyTag resource.
     *
     * @param {string} policyTagName
     *   A fully-qualified path representing PolicyTag resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPolicyTagName(policyTagName) {
        return this.pathTemplates.policyTagPathTemplate.match(policyTagName)
            .project;
    }
    /**
     * Parse the location from PolicyTag resource.
     *
     * @param {string} policyTagName
     *   A fully-qualified path representing PolicyTag resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPolicyTagName(policyTagName) {
        return this.pathTemplates.policyTagPathTemplate.match(policyTagName)
            .location;
    }
    /**
     * Parse the taxonomy from PolicyTag resource.
     *
     * @param {string} policyTagName
     *   A fully-qualified path representing PolicyTag resource.
     * @returns {string} A string representing the taxonomy.
     */
    matchTaxonomyFromPolicyTagName(policyTagName) {
        return this.pathTemplates.policyTagPathTemplate.match(policyTagName)
            .taxonomy;
    }
    /**
     * Parse the policy_tag from PolicyTag resource.
     *
     * @param {string} policyTagName
     *   A fully-qualified path representing PolicyTag resource.
     * @returns {string} A string representing the policy_tag.
     */
    matchPolicyTagFromPolicyTagName(policyTagName) {
        return this.pathTemplates.policyTagPathTemplate.match(policyTagName)
            .policy_tag;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified tag resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} entry_group
     * @param {string} entry
     * @param {string} tag
     * @returns {string} Resource name string.
     */
    tagPath(project, location, entryGroup, entry, tag) {
        return this.pathTemplates.tagPathTemplate.render({
            project: project,
            location: location,
            entry_group: entryGroup,
            entry: entry,
            tag: tag,
        });
    }
    /**
     * Parse the project from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTagName(tagName) {
        return this.pathTemplates.tagPathTemplate.match(tagName).project;
    }
    /**
     * Parse the location from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTagName(tagName) {
        return this.pathTemplates.tagPathTemplate.match(tagName).location;
    }
    /**
     * Parse the entry_group from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the entry_group.
     */
    matchEntryGroupFromTagName(tagName) {
        return this.pathTemplates.tagPathTemplate.match(tagName).entry_group;
    }
    /**
     * Parse the entry from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the entry.
     */
    matchEntryFromTagName(tagName) {
        return this.pathTemplates.tagPathTemplate.match(tagName).entry;
    }
    /**
     * Parse the tag from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the tag.
     */
    matchTagFromTagName(tagName) {
        return this.pathTemplates.tagPathTemplate.match(tagName).tag;
    }
    /**
     * Return a fully-qualified tagTemplate resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} tag_template
     * @returns {string} Resource name string.
     */
    tagTemplatePath(project, location, tagTemplate) {
        return this.pathTemplates.tagTemplatePathTemplate.render({
            project: project,
            location: location,
            tag_template: tagTemplate,
        });
    }
    /**
     * Parse the project from TagTemplate resource.
     *
     * @param {string} tagTemplateName
     *   A fully-qualified path representing TagTemplate resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTagTemplateName(tagTemplateName) {
        return this.pathTemplates.tagTemplatePathTemplate.match(tagTemplateName)
            .project;
    }
    /**
     * Parse the location from TagTemplate resource.
     *
     * @param {string} tagTemplateName
     *   A fully-qualified path representing TagTemplate resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTagTemplateName(tagTemplateName) {
        return this.pathTemplates.tagTemplatePathTemplate.match(tagTemplateName)
            .location;
    }
    /**
     * Parse the tag_template from TagTemplate resource.
     *
     * @param {string} tagTemplateName
     *   A fully-qualified path representing TagTemplate resource.
     * @returns {string} A string representing the tag_template.
     */
    matchTagTemplateFromTagTemplateName(tagTemplateName) {
        return this.pathTemplates.tagTemplatePathTemplate.match(tagTemplateName)
            .tag_template;
    }
    /**
     * Return a fully-qualified tagTemplateField resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} tag_template
     * @param {string} field
     * @returns {string} Resource name string.
     */
    tagTemplateFieldPath(project, location, tagTemplate, field) {
        return this.pathTemplates.tagTemplateFieldPathTemplate.render({
            project: project,
            location: location,
            tag_template: tagTemplate,
            field: field,
        });
    }
    /**
     * Parse the project from TagTemplateField resource.
     *
     * @param {string} tagTemplateFieldName
     *   A fully-qualified path representing TagTemplateField resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTagTemplateFieldName(tagTemplateFieldName) {
        return this.pathTemplates.tagTemplateFieldPathTemplate.match(tagTemplateFieldName).project;
    }
    /**
     * Parse the location from TagTemplateField resource.
     *
     * @param {string} tagTemplateFieldName
     *   A fully-qualified path representing TagTemplateField resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTagTemplateFieldName(tagTemplateFieldName) {
        return this.pathTemplates.tagTemplateFieldPathTemplate.match(tagTemplateFieldName).location;
    }
    /**
     * Parse the tag_template from TagTemplateField resource.
     *
     * @param {string} tagTemplateFieldName
     *   A fully-qualified path representing TagTemplateField resource.
     * @returns {string} A string representing the tag_template.
     */
    matchTagTemplateFromTagTemplateFieldName(tagTemplateFieldName) {
        return this.pathTemplates.tagTemplateFieldPathTemplate.match(tagTemplateFieldName).tag_template;
    }
    /**
     * Parse the field from TagTemplateField resource.
     *
     * @param {string} tagTemplateFieldName
     *   A fully-qualified path representing TagTemplateField resource.
     * @returns {string} A string representing the field.
     */
    matchFieldFromTagTemplateFieldName(tagTemplateFieldName) {
        return this.pathTemplates.tagTemplateFieldPathTemplate.match(tagTemplateFieldName).field;
    }
    /**
     * Return a fully-qualified taxonomy resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} taxonomy
     * @returns {string} Resource name string.
     */
    taxonomyPath(project, location, taxonomy) {
        return this.pathTemplates.taxonomyPathTemplate.render({
            project: project,
            location: location,
            taxonomy: taxonomy,
        });
    }
    /**
     * Parse the project from Taxonomy resource.
     *
     * @param {string} taxonomyName
     *   A fully-qualified path representing Taxonomy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTaxonomyName(taxonomyName) {
        return this.pathTemplates.taxonomyPathTemplate.match(taxonomyName).project;
    }
    /**
     * Parse the location from Taxonomy resource.
     *
     * @param {string} taxonomyName
     *   A fully-qualified path representing Taxonomy resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTaxonomyName(taxonomyName) {
        return this.pathTemplates.taxonomyPathTemplate.match(taxonomyName).location;
    }
    /**
     * Parse the taxonomy from Taxonomy resource.
     *
     * @param {string} taxonomyName
     *   A fully-qualified path representing Taxonomy resource.
     * @returns {string} A string representing the taxonomy.
     */
    matchTaxonomyFromTaxonomyName(taxonomyName) {
        return this.pathTemplates.taxonomyPathTemplate.match(taxonomyName).taxonomy;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.policyTagManagerStub && !this._terminated) {
            return this.policyTagManagerStub.then(stub => {
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.PolicyTagManagerClient = PolicyTagManagerClient;
//# sourceMappingURL=policy_tag_manager_client.js.map