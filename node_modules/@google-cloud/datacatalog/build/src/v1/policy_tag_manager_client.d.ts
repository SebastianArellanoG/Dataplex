/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Policy Tag Manager API service allows you to manage your policy tags and
 *  taxonomies.
 *
 *  Policy tags are used to tag BigQuery columns and apply additional access
 *  control policies. A taxonomy is a hierarchical grouping of policy tags that
 *  classify data along a common axis.
 * @class
 * @memberof v1
 */
export declare class PolicyTagManagerClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    policyTagManagerStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of PolicyTagManagerClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new PolicyTagManagerClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Creates a taxonomy in a specified project.
     *
     * The taxonomy is initially empty, that is, it doesn't contain policy tags.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the project that the taxonomy will belong to.
     * @param {google.cloud.datacatalog.v1.Taxonomy} request.taxonomy
     *   The taxonomy to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.v1.Taxonomy|Taxonomy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.create_taxonomy.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_CreateTaxonomy_async
     */
    createTaxonomy(request?: protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datacatalog.v1.ITaxonomy,
        protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest | undefined,
        {} | undefined
    ]>;
    createTaxonomy(request: protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest, options: CallOptions, callback: Callback<protos.google.cloud.datacatalog.v1.ITaxonomy, protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest | null | undefined, {} | null | undefined>): void;
    createTaxonomy(request: protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest, callback: Callback<protos.google.cloud.datacatalog.v1.ITaxonomy, protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a taxonomy, including all policy tags in this
     * taxonomy, their associated policies, and the policy tags references from
     * BigQuery columns.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the taxonomy to delete.
     *
     *   Note: All policy tags in this taxonomy are also deleted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.delete_taxonomy.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_DeleteTaxonomy_async
     */
    deleteTaxonomy(request?: protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest | undefined,
        {} | undefined
    ]>;
    deleteTaxonomy(request: protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest | null | undefined, {} | null | undefined>): void;
    deleteTaxonomy(request: protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates a taxonomy, including its display name,
     * description, and activated policy types.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.datacatalog.v1.Taxonomy} request.taxonomy
     *   The taxonomy to update. You can update only its description, display name,
     *   and activated policy types.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Specifies fields to update. If not set, defaults to all fields you can
     *   update.
     *
     *   For more information, see [FieldMask]
     *   (https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.v1.Taxonomy|Taxonomy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.update_taxonomy.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_UpdateTaxonomy_async
     */
    updateTaxonomy(request?: protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datacatalog.v1.ITaxonomy,
        protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest | undefined,
        {} | undefined
    ]>;
    updateTaxonomy(request: protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest, options: CallOptions, callback: Callback<protos.google.cloud.datacatalog.v1.ITaxonomy, protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest | null | undefined, {} | null | undefined>): void;
    updateTaxonomy(request: protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest, callback: Callback<protos.google.cloud.datacatalog.v1.ITaxonomy, protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a taxonomy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the taxonomy to get.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.v1.Taxonomy|Taxonomy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.get_taxonomy.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_GetTaxonomy_async
     */
    getTaxonomy(request?: protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datacatalog.v1.ITaxonomy,
        protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest | undefined,
        {} | undefined
    ]>;
    getTaxonomy(request: protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest, options: CallOptions, callback: Callback<protos.google.cloud.datacatalog.v1.ITaxonomy, protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest | null | undefined, {} | null | undefined>): void;
    getTaxonomy(request: protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest, callback: Callback<protos.google.cloud.datacatalog.v1.ITaxonomy, protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a policy tag in a taxonomy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the taxonomy that the policy tag will belong to.
     * @param {google.cloud.datacatalog.v1.PolicyTag} request.policyTag
     *   The policy tag to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.v1.PolicyTag|PolicyTag}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.create_policy_tag.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_CreatePolicyTag_async
     */
    createPolicyTag(request?: protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datacatalog.v1.IPolicyTag,
        protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest | undefined,
        {} | undefined
    ]>;
    createPolicyTag(request: protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest, options: CallOptions, callback: Callback<protos.google.cloud.datacatalog.v1.IPolicyTag, protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest | null | undefined, {} | null | undefined>): void;
    createPolicyTag(request: protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest, callback: Callback<protos.google.cloud.datacatalog.v1.IPolicyTag, protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a policy tag together with the following:
     *
     * * All of its descendant policy tags, if any
     * * Policies associated with the policy tag and its descendants
     * * References from BigQuery table schema of the policy tag and its
     *   descendants
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the policy tag to delete.
     *
     *   Note: All of its descendant policy tags are also deleted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.delete_policy_tag.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_DeletePolicyTag_async
     */
    deletePolicyTag(request?: protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest | undefined,
        {} | undefined
    ]>;
    deletePolicyTag(request: protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest | null | undefined, {} | null | undefined>): void;
    deletePolicyTag(request: protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates a policy tag, including its display
     * name, description, and parent policy tag.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.datacatalog.v1.PolicyTag} request.policyTag
     *   The policy tag to update. You can update only its description, display
     *   name, and parent policy tag fields.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Specifies the fields to update.
     *
     *   You can update only display name, description, and parent policy tag.
     *   If not set, defaults to all updatable fields.
     *   For more information, see [FieldMask]
     *   (https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.v1.PolicyTag|PolicyTag}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.update_policy_tag.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_UpdatePolicyTag_async
     */
    updatePolicyTag(request?: protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datacatalog.v1.IPolicyTag,
        protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest | undefined,
        {} | undefined
    ]>;
    updatePolicyTag(request: protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest, options: CallOptions, callback: Callback<protos.google.cloud.datacatalog.v1.IPolicyTag, protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest | null | undefined, {} | null | undefined>): void;
    updatePolicyTag(request: protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest, callback: Callback<protos.google.cloud.datacatalog.v1.IPolicyTag, protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a policy tag.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the policy tag.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.v1.PolicyTag|PolicyTag}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.get_policy_tag.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_GetPolicyTag_async
     */
    getPolicyTag(request?: protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datacatalog.v1.IPolicyTag,
        protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest | undefined,
        {} | undefined
    ]>;
    getPolicyTag(request: protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest, options: CallOptions, callback: Callback<protos.google.cloud.datacatalog.v1.IPolicyTag, protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest | null | undefined, {} | null | undefined>): void;
    getPolicyTag(request: protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest, callback: Callback<protos.google.cloud.datacatalog.v1.IPolicyTag, protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the IAM policy for a policy tag or a taxonomy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {google.iam.v1.GetPolicyOptions} request.options
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.get_iam_policy.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_GetIamPolicy_async
     */
    getIamPolicy(request?: protos.google.iam.v1.IGetIamPolicyRequest, options?: CallOptions): Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest | undefined,
        {} | undefined
    ]>;
    getIamPolicy(request: protos.google.iam.v1.IGetIamPolicyRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    getIamPolicy(request: protos.google.iam.v1.IGetIamPolicyRequest, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Sets the IAM policy for a policy tag or a taxonomy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being specified.
     *   See the operation documentation for the appropriate value for this field.
     * @param {google.iam.v1.Policy} request.policy
     *   REQUIRED: The complete policy to be applied to the `resource`. The size of
     *   the policy is limited to a few 10s of KB. An empty policy is a
     *   valid policy but certain Cloud Platform services (such as Projects)
     *   might reject them.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
     *   the fields in the mask will be modified. If no mask is provided, the
     *   following default mask is used:
     *
     *   `paths: "bindings, etag"`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.set_iam_policy.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_SetIamPolicy_async
     */
    setIamPolicy(request?: protos.google.iam.v1.ISetIamPolicyRequest, options?: CallOptions): Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest | undefined,
        {} | undefined
    ]>;
    setIamPolicy(request: protos.google.iam.v1.ISetIamPolicyRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    setIamPolicy(request: protos.google.iam.v1.ISetIamPolicyRequest, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns your permissions on a specified policy tag or
     * taxonomy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see
     *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.iam.v1.TestIamPermissionsResponse|TestIamPermissionsResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.test_iam_permissions.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_TestIamPermissions_async
     */
    testIamPermissions(request?: protos.google.iam.v1.ITestIamPermissionsRequest, options?: CallOptions): Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
        {} | undefined
    ]>;
    testIamPermissions(request: protos.google.iam.v1.ITestIamPermissionsRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined, {} | null | undefined>): void;
    testIamPermissions(request: protos.google.iam.v1.ITestIamPermissionsRequest, callback: Callback<protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Lists all taxonomies in a project in a particular location that you
     * have a permission to view.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the project to list the taxonomies of.
     * @param {number} request.pageSize
     *   The maximum number of items to return. Must be a value between 1 and 1000
     *   inclusively. If not set, defaults to 50.
     * @param {string} request.pageToken
     *   The pagination token of the next results page. If not set,
     *   the first page is returned.
     *
     *   The token is returned in the response to a previous list request.
     * @param {string} request.filter
     *   Supported field for filter is 'service' and value is 'dataplex'.
     *   Eg: service=dataplex.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.datacatalog.v1.Taxonomy|Taxonomy}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listTaxonomiesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTaxonomies(request?: protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datacatalog.v1.ITaxonomy[],
        protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest | null,
        protos.google.cloud.datacatalog.v1.IListTaxonomiesResponse
    ]>;
    listTaxonomies(request: protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest, protos.google.cloud.datacatalog.v1.IListTaxonomiesResponse | null | undefined, protos.google.cloud.datacatalog.v1.ITaxonomy>): void;
    listTaxonomies(request: protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest, callback: PaginationCallback<protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest, protos.google.cloud.datacatalog.v1.IListTaxonomiesResponse | null | undefined, protos.google.cloud.datacatalog.v1.ITaxonomy>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the project to list the taxonomies of.
     * @param {number} request.pageSize
     *   The maximum number of items to return. Must be a value between 1 and 1000
     *   inclusively. If not set, defaults to 50.
     * @param {string} request.pageToken
     *   The pagination token of the next results page. If not set,
     *   the first page is returned.
     *
     *   The token is returned in the response to a previous list request.
     * @param {string} request.filter
     *   Supported field for filter is 'service' and value is 'dataplex'.
     *   Eg: service=dataplex.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.datacatalog.v1.Taxonomy|Taxonomy} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTaxonomiesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTaxonomiesStream(request?: protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listTaxonomies`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the project to list the taxonomies of.
     * @param {number} request.pageSize
     *   The maximum number of items to return. Must be a value between 1 and 1000
     *   inclusively. If not set, defaults to 50.
     * @param {string} request.pageToken
     *   The pagination token of the next results page. If not set,
     *   the first page is returned.
     *
     *   The token is returned in the response to a previous list request.
     * @param {string} request.filter
     *   Supported field for filter is 'service' and value is 'dataplex'.
     *   Eg: service=dataplex.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.datacatalog.v1.Taxonomy|Taxonomy}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.list_taxonomies.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_ListTaxonomies_async
     */
    listTaxonomiesAsync(request?: protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.datacatalog.v1.ITaxonomy>;
    /**
     * Lists all policy tags in a taxonomy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the taxonomy to list the policy tags of.
     * @param {number} request.pageSize
     *   The maximum number of items to return. Must be a value between 1 and 1000
     *   inclusively.
     *   If not set, defaults to 50.
     * @param {string} request.pageToken
     *   The pagination token of the next results page. If not set, returns the
     *   first page.
     *
     *   The token is returned in the response to a previous list request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.datacatalog.v1.PolicyTag|PolicyTag}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listPolicyTagsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPolicyTags(request?: protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datacatalog.v1.IPolicyTag[],
        protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest | null,
        protos.google.cloud.datacatalog.v1.IListPolicyTagsResponse
    ]>;
    listPolicyTags(request: protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest, protos.google.cloud.datacatalog.v1.IListPolicyTagsResponse | null | undefined, protos.google.cloud.datacatalog.v1.IPolicyTag>): void;
    listPolicyTags(request: protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest, callback: PaginationCallback<protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest, protos.google.cloud.datacatalog.v1.IListPolicyTagsResponse | null | undefined, protos.google.cloud.datacatalog.v1.IPolicyTag>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the taxonomy to list the policy tags of.
     * @param {number} request.pageSize
     *   The maximum number of items to return. Must be a value between 1 and 1000
     *   inclusively.
     *   If not set, defaults to 50.
     * @param {string} request.pageToken
     *   The pagination token of the next results page. If not set, returns the
     *   first page.
     *
     *   The token is returned in the response to a previous list request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.datacatalog.v1.PolicyTag|PolicyTag} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listPolicyTagsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPolicyTagsStream(request?: protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listPolicyTags`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the taxonomy to list the policy tags of.
     * @param {number} request.pageSize
     *   The maximum number of items to return. Must be a value between 1 and 1000
     *   inclusively.
     *   If not set, defaults to 50.
     * @param {string} request.pageToken
     *   The pagination token of the next results page. If not set, returns the
     *   first page.
     *
     *   The token is returned in the response to a previous list request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.datacatalog.v1.PolicyTag|PolicyTag}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/policy_tag_manager.list_policy_tags.js</caption>
     * region_tag:datacatalog_v1_generated_PolicyTagManager_ListPolicyTags_async
     */
    listPolicyTagsAsync(request?: protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.datacatalog.v1.IPolicyTag>;
    /**
     * Return a fully-qualified entry resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} entry_group
     * @param {string} entry
     * @returns {string} Resource name string.
     */
    entryPath(project: string, location: string, entryGroup: string, entry: string): string;
    /**
     * Parse the project from Entry resource.
     *
     * @param {string} entryName
     *   A fully-qualified path representing Entry resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntryName(entryName: string): string | number;
    /**
     * Parse the location from Entry resource.
     *
     * @param {string} entryName
     *   A fully-qualified path representing Entry resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntryName(entryName: string): string | number;
    /**
     * Parse the entry_group from Entry resource.
     *
     * @param {string} entryName
     *   A fully-qualified path representing Entry resource.
     * @returns {string} A string representing the entry_group.
     */
    matchEntryGroupFromEntryName(entryName: string): string | number;
    /**
     * Parse the entry from Entry resource.
     *
     * @param {string} entryName
     *   A fully-qualified path representing Entry resource.
     * @returns {string} A string representing the entry.
     */
    matchEntryFromEntryName(entryName: string): string | number;
    /**
     * Return a fully-qualified entryGroup resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} entry_group
     * @returns {string} Resource name string.
     */
    entryGroupPath(project: string, location: string, entryGroup: string): string;
    /**
     * Parse the project from EntryGroup resource.
     *
     * @param {string} entryGroupName
     *   A fully-qualified path representing EntryGroup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntryGroupName(entryGroupName: string): string | number;
    /**
     * Parse the location from EntryGroup resource.
     *
     * @param {string} entryGroupName
     *   A fully-qualified path representing EntryGroup resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntryGroupName(entryGroupName: string): string | number;
    /**
     * Parse the entry_group from EntryGroup resource.
     *
     * @param {string} entryGroupName
     *   A fully-qualified path representing EntryGroup resource.
     * @returns {string} A string representing the entry_group.
     */
    matchEntryGroupFromEntryGroupName(entryGroupName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified policyTag resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} taxonomy
     * @param {string} policy_tag
     * @returns {string} Resource name string.
     */
    policyTagPath(project: string, location: string, taxonomy: string, policyTag: string): string;
    /**
     * Parse the project from PolicyTag resource.
     *
     * @param {string} policyTagName
     *   A fully-qualified path representing PolicyTag resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPolicyTagName(policyTagName: string): string | number;
    /**
     * Parse the location from PolicyTag resource.
     *
     * @param {string} policyTagName
     *   A fully-qualified path representing PolicyTag resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPolicyTagName(policyTagName: string): string | number;
    /**
     * Parse the taxonomy from PolicyTag resource.
     *
     * @param {string} policyTagName
     *   A fully-qualified path representing PolicyTag resource.
     * @returns {string} A string representing the taxonomy.
     */
    matchTaxonomyFromPolicyTagName(policyTagName: string): string | number;
    /**
     * Parse the policy_tag from PolicyTag resource.
     *
     * @param {string} policyTagName
     *   A fully-qualified path representing PolicyTag resource.
     * @returns {string} A string representing the policy_tag.
     */
    matchPolicyTagFromPolicyTagName(policyTagName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified tag resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} entry_group
     * @param {string} entry
     * @param {string} tag
     * @returns {string} Resource name string.
     */
    tagPath(project: string, location: string, entryGroup: string, entry: string, tag: string): string;
    /**
     * Parse the project from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTagName(tagName: string): string | number;
    /**
     * Parse the location from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTagName(tagName: string): string | number;
    /**
     * Parse the entry_group from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the entry_group.
     */
    matchEntryGroupFromTagName(tagName: string): string | number;
    /**
     * Parse the entry from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the entry.
     */
    matchEntryFromTagName(tagName: string): string | number;
    /**
     * Parse the tag from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the tag.
     */
    matchTagFromTagName(tagName: string): string | number;
    /**
     * Return a fully-qualified tagTemplate resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} tag_template
     * @returns {string} Resource name string.
     */
    tagTemplatePath(project: string, location: string, tagTemplate: string): string;
    /**
     * Parse the project from TagTemplate resource.
     *
     * @param {string} tagTemplateName
     *   A fully-qualified path representing TagTemplate resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTagTemplateName(tagTemplateName: string): string | number;
    /**
     * Parse the location from TagTemplate resource.
     *
     * @param {string} tagTemplateName
     *   A fully-qualified path representing TagTemplate resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTagTemplateName(tagTemplateName: string): string | number;
    /**
     * Parse the tag_template from TagTemplate resource.
     *
     * @param {string} tagTemplateName
     *   A fully-qualified path representing TagTemplate resource.
     * @returns {string} A string representing the tag_template.
     */
    matchTagTemplateFromTagTemplateName(tagTemplateName: string): string | number;
    /**
     * Return a fully-qualified tagTemplateField resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} tag_template
     * @param {string} field
     * @returns {string} Resource name string.
     */
    tagTemplateFieldPath(project: string, location: string, tagTemplate: string, field: string): string;
    /**
     * Parse the project from TagTemplateField resource.
     *
     * @param {string} tagTemplateFieldName
     *   A fully-qualified path representing TagTemplateField resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTagTemplateFieldName(tagTemplateFieldName: string): string | number;
    /**
     * Parse the location from TagTemplateField resource.
     *
     * @param {string} tagTemplateFieldName
     *   A fully-qualified path representing TagTemplateField resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTagTemplateFieldName(tagTemplateFieldName: string): string | number;
    /**
     * Parse the tag_template from TagTemplateField resource.
     *
     * @param {string} tagTemplateFieldName
     *   A fully-qualified path representing TagTemplateField resource.
     * @returns {string} A string representing the tag_template.
     */
    matchTagTemplateFromTagTemplateFieldName(tagTemplateFieldName: string): string | number;
    /**
     * Parse the field from TagTemplateField resource.
     *
     * @param {string} tagTemplateFieldName
     *   A fully-qualified path representing TagTemplateField resource.
     * @returns {string} A string representing the field.
     */
    matchFieldFromTagTemplateFieldName(tagTemplateFieldName: string): string | number;
    /**
     * Return a fully-qualified taxonomy resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} taxonomy
     * @returns {string} Resource name string.
     */
    taxonomyPath(project: string, location: string, taxonomy: string): string;
    /**
     * Parse the project from Taxonomy resource.
     *
     * @param {string} taxonomyName
     *   A fully-qualified path representing Taxonomy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTaxonomyName(taxonomyName: string): string | number;
    /**
     * Parse the location from Taxonomy resource.
     *
     * @param {string} taxonomyName
     *   A fully-qualified path representing Taxonomy resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTaxonomyName(taxonomyName: string): string | number;
    /**
     * Parse the taxonomy from Taxonomy resource.
     *
     * @param {string} taxonomyName
     *   A fully-qualified path representing Taxonomy resource.
     * @returns {string} A string representing the taxonomy.
     */
    matchTaxonomyFromTaxonomyName(taxonomyName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
